@onmain {
	event( oEyeBall, 'create', @fn {
		image_speed = 0;
		
		// movement speed
		MovAcc = 45 * flu( 0.35 );
		
		// rotation
		rot = rand()*360;
		
		// current speed
		hspd = 0;
		vspd = 0;
		
		// attack cooldown
		Cdw = 0;
		
		// stats
		CurHp  = 15 * flu( 0.20 );
		MaxHp  = CurHp;
		Armour = 0;
		
		// hurt func
		onHurt = @fn (x, y, pct) {
			&newFXFlesh( x, y, clamp( 0.80, 1.0, pct ), 0.15 );
		}
		
		// death func
		onDeath = @fn {
			&newFXFlesh( x, y, 1.0, 0.35 );
			 destroy();
		}
		
	});
	
	event( oEyeBall, 'step', @fn {
		@test ( Cdw > 0 ) {
			Cdw-=ts;
		}
		
		ff~= true; // friction-flag
		
		@test ( exists( oChar ) ) {
			tx~= oChar.x;
			ty~= oChar.y;
			
			@test ( point_distance( x, y, tx, ty ) < 150 ) {
				@test ( !collision_line( x, y, tx, ty, oBlock, false, true ) ) {
					// add movement towards player
					r~, a~= MovAcc*ts, point_direction( x, y, tx, ty );
					hspd += lenx(r,a);
					vspd += leny(r,a);
					
					// turn towards player
					r, a_~ = point_distance( 0, 0, hspd, vspd ), point_direction( 0, 0, hspd, vspd );
					a = ttw( a_, a, 45*ts );
					hspd = lenx(r,a_);
					vspd = leny(r,a_);
					
					// prevent friction
					ff = false;
				}
			}
		}
		
		@test ( ff ) {
			// apply friction
			hspd = twz( hspd, MovAcc*ts );
			vspd = twz( vspd, MovAcc*ts );
		}
		
		// apply movement
		@test ( hspd != 0 ) {
			xt~= x+hspd*ts;
			@test ( place_meeting( xt, y, oBlock ) ) {
				-hspd*=0.5;
				rot = point_direction( 0, 0, hspd, vspd );
				//rot = ttw( rot, point_direction( 0, 0, hspd, vspd ), 90 );
			} @else {
				x = xt;
			}
		}
		
		@test ( vspd != 0 ) {
			yt~= y+vspd*ts;
			@test ( place_meeting( x, yt, oBlock ) ) {
				-vspd*=0.5;
				rot = point_direction( 0, 0, hspd, vspd );
				//rot = ttw( rot, point_direction( 0, 0, hspd, vspd ), 90 );
			} @else {
				y = yt;
			}
		}
		
		// attack player
		@test ( Cdw <= 0 ) {
			// set mask
			image_angle = rot;
			mask_index  = sEyeBall;
			
			@with (instance_place( x, y, oChar )) {
				other.Cdw+=0.35;
				CurHp-=1;
				
				effect_create_above( ef_flare, other.x, other.y, 0, c_red );
			}
			
			// clear mask
			image_angle = 0;
			mask_index  = sEyeBallMoveMask;
		}
		
		// turn towards movement direction
		@test ( hspd != 0 || vspd != 0 ) {
			dir~= point_direction( 0, 0, hspd, vspd );
			rot = ttw( rot, dir, (45 + abs(angdiff(rot,dir)))*ts );
		}
		
	});
	
	event( oEyeBall, 'draw', @fn {
		draw_sprite_ext( sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, rot, image_blend, image_alpha );
		
	});
}

