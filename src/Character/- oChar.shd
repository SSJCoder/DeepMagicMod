LMB, RMB, MMB, ESC;

&CharSpawn {
	LightEnable( oChar );
	
	// lighting
	event( oCamera, 'step-end', @fn {
		Light2D_Update();
	});
	
	@with (create(oChar)) {
		ysp = 0;
		grv = 700;
		
		key_jump   = KeyGet( KeySpc );
		key_jump2  = KeyGet( KeyW );
		key_lf     = KeyGet( KeyA );
		key_rg     = KeyGet( KeyD );
		key_spells = KeyGet( KeyQ );
		key_use    = KeyGet( KeyE );
		
		// setup sprite
		image_speed = 0;
		
		&CharGetStats( &CharMap );
		
		// create camera
		CamCreate( x, y, true );
		
		// create arm
		arm = class_d( sCharArm );
		arm.depth = depth-1;
		ArmUpdate = @fn {
			arm.x = round(x)-image_xscale*2;
			arm.y = round(y)+5;
			arm.image_angle = point_direction( arm.x-view_xview[0], arm.y-view_yview[0], px, py );
		}
		
		// update arm
		ArmUpdate();
		
		// lighting
		drawLight = &oCharDrawLight;
		
		// update lighting
		Light2D_Update();
		
	}
}

&oCharDrawLight {
	// character light
	rx~= round(x)-view_xview[0];
	ry~= round(y)-view_yview[0];
	draw_sprite_ext( sLight, 0, rx, ry, 2.0, 2.0, 0, rgb(0.8,0.8,0.8), 1.0 );
	// draw light at the pointer
	dis~= point_distance( rx, ry, px, py )
	 lx~;
	 ly~;
	@test ( dis > 192 ) {
		r~,a~= 192, point_direction( rx, ry, px, py );
		  lx = rx+round(lenx(r,a));
		  ly = ry+round(leny(r,a));
	} @else {
		lx = px;
		ly = py;
	}
	
	draw_sprite_ext( sLight, 0, lx, ly, 1.5, 1.5, 0, rgb(0.5,0.5,0.5), 0.65 );
	
}

@onmain {
	//&key_jump = KeyGet( KeySpc );
	//&key_lf   = KeyGet( KeyA );
	//&key_rg   = KeyGet( KeyD );
	
	LMB = KeyGet( KeyPtrL );
	RMB = KeyGet( KeyPtrR );
	MMB = KeyGet( KeyPtrM );
	ESC = KeyGet( KeyEsc );
	
	event( oChar, 'step', @fn {
		@test ( KeyHeld( RMB ) ) {
			xp~= px/view_wview[0];
			yp~= py/view_hview[0];
			//&newLightFlash( view_xview[0]+px*rand(), view_yview[0]+py*rand(), rgb(rand(),rand(),rand()), 1.0, 15+rand()*85, 1.0 );
			//&newLightFlash( view_xview[0]+px, view_yview[0]+py, c_blue, 1.0, (xp+yp)*350, 1.0 );
		}
		
		// update cooldown
		@test ( Cdw > 0 ) {
			Cdw-=ts;
		}
		
		// regenerate health
		CurHp = min( MaxHp, CurHp+(MaxHp*(RegHp*.01))*ts );
		
		// regenerate mana
		CurMp = min( MaxMp, CurMp+(MaxMp*(RegMp*.01))*ts );
		
		// cast spells
		@test ( KeyHeld( LMB ) ) {
			@test ( &spell_LMB != -1 ) {
				spell~= &spells[&spell_LMB];
				 cost~=  spell[5];
				@test ( Cdw <= 0 && CurMp >= cost ) {
					CurMp -= cost;
					  rof~ = spell[6]; // rate-of-fire
					  DPS~ = spell[7]; // damage-per-second
					  Cdw += 1/rof;
					spell[8]( DPS/rof );
				}
			}
		}
		
		@test ( KeyHeld( RMB ) ) {
			@test ( &spell_RMB != -1 ) {
				spell~= &spells[&spell_RMB];
				 cost~=  spell[5];
				@test ( Cdw <= 0 && CurMp >= cost ) {
					CurMp -= cost;
					  rof~ = spell[6]; // rate-of-fire
					  DPS~ = spell[7]; // damage-per-second
					  Cdw += 1/rof;
					spell[8]( DPS/rof );
				}
			}
		}
		
		// check if touching floor
		touch_floor~= place_meeting( x, y+1, oBlock );
		
		// apply gravity
		@test ( !touch_floor ) {
			ysp = min( 500, ysp+grv*ts );
		}
		
		@test ( KeyPressed( key_jump ) || KeyPressed( key_jump2 ) ) {
			@test ( touch_floor ) {
				ysp = -320;
			}
		} @elif ( !KeyHeld( key_jump ) && !KeyHeld( key_jump2 ) && ysp < -160 ) {
			ysp = -160;
		}
		
		@test ( touch_floor ) {
			sprite_index = sChar;
		} @else {
			sprite_index = sCharJump;
		}
		
		hi~ = KeyHeld(key_rg)-KeyHeld(key_lf);
		@test ( hi != 0 ) {
			xt~ = x+100*hi*ts;
			@test ( !place_meeting( xt, y, oBlock ) ) {
				x=xt;
				
				image_xscale = sign( hi );
				image_speed  = 13*ts;
			}
		} @else {
			image_speed = 0;
			image_index = 0;
		}
		
		// apply y-speed
		yt~ = y+ysp*ts;
		 o~ = instance_place( x, yt, oBlock );
		@test ( o != -4 ) {
			@test ( ysp < 0 ) {
				// touch up
				y = o.y-sprite_get_yoffset(o.sprite_index)+sprite_get_height(o.sprite_index)+sprite_get_yoffset(sCharMask)-1;
			} @else {
				// touch down
				y = o.y-sprite_get_yoffset(o.sprite_index)-sprite_get_height(sCharMask)+sprite_get_yoffset(sCharMask)+1;
			}
			
			// clear speed
			ysp = 0;
		} @else {
			y = yt;
		}
		
		//##DEBUG::TELEPORT W/ MMB
		@test ( KeyPressed( MMB ) ) {
			x = view_xview[0]+px;
			y = view_yview[0]+py;
		}
		
		// set camera position
		CamSet( x, y );
		
		// update arm
		ArmUpdate();
		
		// open spells menu
		@test ( KeyPressed( key_spells ) ) {
			@with ($oCamera) { evperf( 'step-end' ) }
			&SpellsOpen();
		}
		
		// enter doors
		@test ( KeyPressed( key_use ) ) {
			@test ( place_meeting( x, y, oWhiteDoor ) ) {
				&CharSetStats( &CharMap );
				room_goto_previous();
			} @elif ( place_meeting( x, y, oBlackDoor ) ) {
				&CharSetStats( &CharMap );
				room_goto_next();
			}
		}
	});
	
	event( oChar, 'draw', draw_self );
}

&CharGetStats (map) {
	// cooldown
	Cdw = MapGet( map, 'Cdw' );
	
	// health & mana
	CurHp = MapGet( map, 'CurHp' );
	MaxHp = MapGet( map, 'MaxHp' );
	RegHp = MapGet( map, 'RegHp' );
	CurMp = MapGet( map, 'CurMp' );
	MaxMp = MapGet( map, 'MaxMp' );
	RegMp = MapGet( map, 'RegMp' );
	
	// coordinates
	x = MapGet( map, 'x' );
	y = MapGet( map, 'y' );
	
	// physics
	ysp = MapGet( map, 'ysp' );
	// spriting
	sprite_index = MapGet( map, 'sprite_index' );
	image_index  = MapGet( map, 'image_index' );
	image_speed  = MapGet( map, 'image_speed' );
	image_xscale = MapGet( map, 'image_xscale' );
}

&CharSetStats (map) {
	MapSet( map, [
		// cooldown
		'Cdw', Cdw, 
		
		// health & mana
		'CurHp', CurHp, 
		'MaxHp', MaxHp, 
		'RegHp', RegHp, 
		'CurMp', CurMp, 
		'MaxMp', MaxMp, 
		'RegMp', RegMp, 
		
		// coordinates
		'x', x, 
		'y', y, 
		
		// physics
		'ysp', ysp, 
		// spriting
		'sprite_index', sprite_index, 
		'image_index',  image_index, 
		'image_speed',  image_speed, 
		'image_xscale', image_xscale
	]);
}

